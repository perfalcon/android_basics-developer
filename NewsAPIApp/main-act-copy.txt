package com.example.android.newsapiapp;

import java.io.*;
import java.util.*;

import android.app.Activity;
import android.app.LoaderManager;
import android.content.AsyncTaskLoader;
import android.content.Context;
import android.content.Intent;
import android.content.Loader;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.AsyncTask;
import android.os.Parcelable;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;
import android.text.format.DateFormat;
import 	java.text.SimpleDateFormat;

import org.json.JSONArray;
import org.json.JSONObject;
import android.app.LoaderManager;
import android.app.LoaderManager.LoaderCallbacks;
import android.content.Loader;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;

import static android.R.attr.author;
import static android.R.attr.description;

public class MainActivity extends AppCompatActivity implements LoaderManager.LoaderCallbacks<List<Article>> {

    Parcelable state;
    String request_url = "https://newsapi.org/v1/articles?source=techcrunch&apiKey=8ca9538c551844ff93f01d008870968e";
    ArticleAdapter articleAdapter;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        // Make The Request
        // new Client().execute(request_url);
        getLoaderManager().initLoader(0, null, this).forceLoad();

    }

    @Override
    public Loader<List<Article>> onCreateLoader(int id, Bundle args) {
        Log.v("Create ---", "Create Called");
        return new ArticlesLoader( MainActivity.this, request_url );
    }

    @Override
    public void onLoadFinished(Loader<List<Article>> loader, List<Article> data) {
        Log.v("Finished ---", "Finished Called");

        articleAdapter = new ArticleAdapter(MainActivity.this, data);
        ListView main_view = (ListView)findViewById(R.id.main_list_view);
        state = main_view.onSaveInstanceState();
        main_view.setEmptyView(findViewById(R.id.empty_list_item));
        main_view.setAdapter(articleAdapter);
        main_view.onRestoreInstanceState(state);

        Toast.makeText(MainActivity.this, "Powered by - News API at: www.newsapi.org", Toast.LENGTH_LONG).show();
    }

    @Override
    public void onLoaderReset(Loader<List<Article>> loader) {
        Log.v("Reset ---", "Reset Called");
        Toast.makeText(MainActivity.this, "Resetting...", Toast.LENGTH_LONG).show();
        articleAdapter.clear();
    }

    // Custom Adapter
    private class ArticleAdapter extends ArrayAdapter<Article> {

        public ArticleAdapter(Activity context, List<Article> list) {
            super(context, 0, list);
        }

        @Override
        public View getView(int position, View convertView, ViewGroup parent) {

            final Article current_article = getItem(position);

            View list_item_view = convertView;
            if(list_item_view == null) {
                list_item_view = LayoutInflater.from(getContext()).inflate(R.layout.article_item, parent, false);
            }

            ImageView articleIcon = list_item_view.findViewById(R.id.article_icon);
            TextView articleTitle = list_item_view.findViewById(R.id.article_title);
            TextView articleDesc = list_item_view.findViewById(R.id.article_desc);
            TextView articleAuthor = list_item_view.findViewById(R.id.article_author);
            TextView articleDate = list_item_view.findViewById(R.id.article_date);
            TextView articleLink = list_item_view.findViewById(R.id.article_link);

            if(!current_article.img_url.equals("")) {
                new DownloadImageTask(articleIcon).execute(current_article.img_url);
            }
            articleTitle.setText( current_article.title );
            articleDesc.setText( current_article.desc );
            articleAuthor.setText( "Author: " + current_article.author );
            articleDate.setText( "Published At: " + current_article.date );
            articleLink.setText( current_article.link );

            return list_item_view;

        }
    }

    // Load Image(s) via url
    private class DownloadImageTask extends AsyncTask<String, Void, Bitmap> {
        ImageView bmImage;

        public DownloadImageTask(ImageView bmImage) {
            this.bmImage = bmImage;
        }

        protected Bitmap doInBackground(String... urls) {
            String urldisplay = urls[0];
            Bitmap mIcon11 = null;
            try {
                InputStream in = new java.net.URL(urldisplay).openStream();
                mIcon11 = BitmapFactory.decodeStream(in);
            } catch (Exception e) {
                Log.e("Error", e.getMessage());
                e.printStackTrace();
            }
            return mIcon11;
        }

        protected void onPostExecute(Bitmap result) {
            bmImage.setImageBitmap(result);
        }
    }

    // Private Inner Class
    public class ArticlesLoader extends AsyncTaskLoader<List<Article>> {
        String json_string = "";
        private String url;


        public ArticlesLoader(Context context, String url) {
            super(context);
            this.url = url;
        }

        @Override
        protected void onStartLoading() {
            forceLoad();
        }

        @Override
        public List<Article> loadInBackground() {
            HttpURLConnection url_conn = null;
            InputStream input_stream = null;
            ArrayList<Article> articles_list = new ArrayList<Article>();

            try {
                URL request_url = new URL(url);
                url_conn = (HttpURLConnection) request_url.openConnection();
                url_conn.setRequestMethod("GET");
                url_conn.setReadTimeout(10000);
                url_conn.setConnectTimeout(10000);
                url_conn.connect();

                if(url_conn.getResponseCode() == 200) {
                    input_stream = url_conn.getInputStream();
                    BufferedReader r = new BufferedReader(new InputStreamReader(input_stream));
                    StringBuilder total = new StringBuilder();
                    String line;
                    while ((line = r.readLine()) != null) {
                        total.append(line).append('\n');
                    }
                    json_string = total.toString();

                    Log.v("Connection made ---", "Admit One");
                    Log.v("JSON --- ", json_string);

                    try {
                        JSONObject json = new JSONObject(json_string);

                        if(!json.has("articles")) {
                            Toast.makeText(MainActivity.this, "No Results, try another query...", Toast.LENGTH_LONG).show();
                        }
                        else {
                            JSONArray articles = json.getJSONArray("articles");
                            for(int i = 0; i < articles.length(); i++) {
                                JSONObject obj = articles.getJSONObject(i);

                                String title = getResources().getString(R.string.null_title);
                                if(obj.has("title")) {
                                    title = obj.getString("title");
                                }
                                String desc = getResources().getString(R.string.null_desc);
                                if(obj.has("description")) {
                                    desc = obj.getString("description");
                                }
                                String author = getResources().getString(R.string.null_author);
                                if(obj.has("author")) {
                                    author = obj.getString("author");
                                }
                                String img_url = "";
                                if(obj.has("urlToImage")) {
                                    img_url = obj.getString("urlToImage");
                                }
                                String publish_date = getResources().getString(R.string.null_publishdate);
                                if(obj.has("publishedAt")) {
                                    String[] splitter = obj.getString("publishedAt").split("T");

                                    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-DD");
                                    Date newDate = dateFormat.parse(splitter[0]);
                                    dateFormat = new SimpleDateFormat("MMM dd, yyyy");
                                    String date = dateFormat.format(newDate);

                                    publish_date = date.toString();
                                }
                                String link = getResources().getString(R.string.null_link);
                                if(obj.has("url")) {
                                    link = obj.getString("url");
                                }

                                articles_list.add(new Article(title, desc, author, img_url, publish_date, link));
                            }
                        }

                    }
                    catch (Exception e) {
                        Toast.makeText(MainActivity.this, "There was an error building the view...", Toast.LENGTH_LONG).show();
                        Log.v("Error... ", String.valueOf(e));
                    }
                }

                url_conn.disconnect();
                if(input_stream != null) {
                    input_stream.close();
                }
                Log.v("Test....", "TESTING--------------");

            }
            catch (IOException e) {
                Toast.makeText(getApplicationContext(), "Error...", Toast.LENGTH_LONG).show();
                Log.v("Error...", String.valueOf(e));
            }

            Log.v("Returning List..." , "Returning...");
            return articles_list;
        }
    }

}
